import raw from "../queryFiles/cfquery.xml";
import {tokenizingQuery} from "./Tokenizing";
import {convertArray} from "./Utilities";

export const readQueryXMLFile = () => {
    fetch(raw)
        .then(r => r.text())
        .then(text => {
            let tmp = parseXML(text);
            //console.log(tmp);
            return tmp;
        });

}


export const allQueries = {};

export const parseXML = (text) => {
    // getDomParsers
    const parser = new DOMParser();
    const dom = parser.parseFromString(text, "application/xml");

    let queries = new Set();
    queries = dom.getElementsByTagName('QUERY');


    // find needed tags
    let autoGeneratedId = 0;
    for (const query of queries){

        let queryNum = query.getElementsByTagName("QueryNumber")[0] == undefined ? autoGeneratedId+'' : query.getElementsByTagName("QueryNumber")[0].childNodes[0].data;
        autoGeneratedId++; // increment autoGeneratedId to record the sequence of doc being read

        let results = query.getElementsByTagName("Results")[0] == undefined ? '0' : query.getElementsByTagName("Results")[0].childNodes[0].data;

        let rawText = query.getElementsByTagName("QueryText")[0] == undefined ? 0 : query.getElementsByTagName("QueryText")[0].childNodes[0].data;

        //console.log(rawText);
        //let queryTerms = [];
        //queryTerms = tokenizingQuery(rawText);
        //let queryItems = query.querySelectorAll('Item')
        let temps = query.getElementsByTagName('Item');

        //console.log(queryItems);
        let expectedDocs = [];
        //let expectedTemp = [];
        for (let item of temps){
            expectedDocs.push(parseInt(item.textContent));
        }

        allQueries[queryNum] = new Object();
        allQueries[queryNum].maxResults = parseInt(results);
        allQueries[queryNum].queryNum = queryNum;
        allQueries[queryNum].expectedDocs = expectedDocs;
        allQueries[queryNum].queryText = rawText;
    }
    //console.log(allQueries);
    return allQueries;
}


export default {
    readQueryXMLFile, allQueries
}